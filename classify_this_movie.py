# -*- coding: utf-8 -*-
"""Classify This Movie.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1AoH8yOQlxWeyrrrUCLMtIsMZp4ZQ5FLT
"""

import os
os.environ['KAGGLE_USERNAME'] = "chetan06" # username from the json file
os.environ['KAGGLE_KEY'] = "7d2278eed41410fa7e29bd2c7cea4e57" # key from the json file
!kaggle datasets download -d sshukla21/clabscvcomp # api copied from kaggle
!unzip -qq clabscvcomp.zip
!rm -r clabscvcomp.zip

from fastai import *
from fastai.vision import *
from sklearn.metrics import f1_score

def seed_everything(seed):
    random.seed(seed)
    os.environ['PYTHONHASHSEED'] = str(seed)
    np.random.seed(seed)
    torch.manual_seed(seed)
    torch.cuda.manual_seed(seed)
    torch.backends.cudnn.deterministic = True
seed_everything(43)

train = pd.read_csv('data/train.csv')
test_df = pd.read_csv('data/sample_submission.csv')

train.head() ## Shows the first five rows of data frame

sorted(train.genres.unique()) ## Shows all classes in the dataframe

train.genres.value_counts(normalize=True) ## Distribution of dataset



sz = 256 ## Image size
bs = 16 ## Batch size
tfms = get_transforms( ## Transformation to apply on Train data
    do_flip=False, ## Horizontal flip
    flip_vert=True, ## Vertical flip
    max_rotate=60, ## Rotation
    max_zoom=1.8, ## Center zoom
    max_lighting=0.1 ## lighting
)

data = (
    ImageList.from_df(df=train, path='', folder='data/train_data/', cols='id', suffix = '.jpg') ## define data path
    .split_by_rand_pct(valid_pct=0.3) ## validation split
    .label_from_df(cols='genres') ## load labels from
    .transform(tfms, size=sz)
    .databunch(bs=bs, num_workers=5) 
    .normalize(imagenet_stats)
    )

test_data = ImageList.from_df(test_df, path='data/test_data/', cols='id', suffix = '.jpg')
data.add_test(test_data)

#Visualizing dataset
data.show_batch(5)

def F1(y_pred, y):
    y_pred = y_pred.softmax(dim=1) 
    y_pred = y_pred.argmax(dim=1)
    return torch.tensor(f1_score(y.cpu(), y_pred.cpu(), labels=list(range(10)), average='weighted'),device='cuda:0')

learn = cnn_learner(
                    data, ## DataBunch
                    models.resnet152, ## resnet152 #resnet152 is a model architecture
                    metrics=[F1, accuracy], ## Matrices
                    callback_fns=ShowGraph ## Allows us to visualize training
)

learn.freeze() 
learn.fit_one_cycle(5) # 5 is the number of epoch.It means that it runs over the dataset for 5 times

learn.unfreeze()
learn.lr_find()
learn.recorder.plot(suggestion=True)

learn.fit_one_cycle(5, max_lr=slice(1e-05, 1e-04))

preds = learn.get_preds(ds_type=DatasetType.Test) ## get prediction in test data
preds = np.argmax(preds[0].numpy(),axis = 1) #finding the class with max probability
categories = sorted(train.genres.unique().astype('str')) # list with the unique classes
final_preds = [] 
for idx in preds:
    final_preds.append(categories[idx]) 
final_submit = pd.read_csv('data/sample_submission.csv') 
final_submit.genres = final_preds
final_submit.head()
final_submit.to_csv('submission.csv',index = False)

!pip install kaggle
!kaggle competitions submit -c cl-cv2020 -f submission.csv -m "Message"

